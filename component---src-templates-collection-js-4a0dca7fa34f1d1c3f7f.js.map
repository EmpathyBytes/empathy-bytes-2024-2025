{"version":3,"file":"component---src-templates-collection-js-4a0dca7fa34f1d1c3f7f.js","mappings":"0OAoCe,SAASA,EAAcC,GAElC,OADgBC,EAAAA,EAAAA,GAAc,qBAGtBC,EAAAA,cAAA,WAASC,UAAU,YACfD,EAAAA,cAACE,EAAAA,GAAI,CAACC,GAAIL,EAAMM,IAAKC,MAAO,CAACC,eAAe,OAAQC,MAAM,YACtDP,EAAAA,cAACQ,EAAAA,EAAc,KACXR,EAAAA,cAACS,EAAAA,GAAI,CACDC,WAAS,EAACC,QAAW,EACrBC,WAAa,SACbC,eAAe,iBAEfb,EAAAA,cAACS,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GACXf,EAAAA,cAAA,OAAKC,UAAU,YAAYe,IAAKlB,EAAMmB,OAE1CjB,EAAAA,cAACS,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GACXf,EAAAA,cAAA,MAAIC,UAAU,YAAYH,EAAMoB,OAChClB,EAAAA,cAAA,SAAG,MAAIF,EAAMqB,QACbnB,EAAAA,cAAA,OAAKC,UAAY,UAAUmB,wBAAyB,CAAEC,OAAQvB,EAAMwB,QACpEtB,EAAAA,cAAA,SAAIF,EAAMyB,WAU9BvB,EAAAA,cAAA,WAASC,UAAU,YACfD,EAAAA,cAACE,EAAAA,GAAI,CAACC,GAAIL,EAAMM,IAAKC,MAAO,CAACC,eAAe,OAAQC,MAAM,YACtDP,EAAAA,cAACQ,EAAAA,EAAc,KACXR,EAAAA,cAACS,EAAAA,GAAK,CACFC,WAAS,EAACC,QAAS,EACnBC,WAAW,UAEXZ,EAAAA,cAACS,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GACPf,EAAAA,cAAA,OAAKC,UAAU,YAAYe,IAAKlB,EAAMmB,OAE9CjB,EAAAA,cAACS,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GACXf,EAAAA,cAAA,MAAIC,UAAU,YAAYH,EAAMoB,OAChClB,EAAAA,cAAA,SAAG,MAAIF,EAAMqB,SAEjBnB,EAAAA,cAACS,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,IACXf,EAAAA,cAAA,OAAKC,UAAU,UAAUmB,wBAAyB,CAAEC,OAAQvB,EAAMwB,QAClEtB,EAAAA,cAAA,SAAIF,EAAMyB,UAS1C,CC1EA,MAAMb,EAAY,CACdc,QAAS,QAET,cAAiB,UAGfC,EAAkB,CACpB,aAAgB,SAChB,cAAiB,GACjB,cAAiB,qBACjBlB,MAAO,WAyFX,MAtFA,SAAmBmB,GAAY,IAAX,KAAEC,GAAMD,EACxB,MAAME,EAAaD,EAAKC,WAClBC,EAAYF,EAAKE,UAAUC,cAAcC,cAE/C,OACI/B,EAAAA,cAACgC,EAAAA,EAAM,KACHhC,EAAAA,cAAA,aAAQ4B,EAAWV,OACnBlB,EAAAA,cAAA,OAAKK,MAAOK,GACRV,EAAAA,cAAA,MAAIK,MAAOoB,GAAkBG,EAAWV,OACxClB,EAAAA,cAAA,OAAKoB,wBAAyB,CAAEC,OAAQO,EAAWN,KAAKW,aACxDjC,EAAAA,cAAA,UACC6B,EAAUK,KAAKC,GACZnC,EAAAA,cAACH,EAAa,CACVoB,IAAK,0CAA4CkB,EAAEL,cAAcM,YAAYC,IAAIjC,IACjFc,MAAOiB,EAAEjB,MACTC,OAAQgB,EAAEG,aACVf,KAAMY,EAAEI,kBACRjB,KAAMa,EAAEK,YACRpC,IAAK,YAAcwB,EAAWa,KAAKC,MAAQP,EAAEM,KAAKC,WAO1E,C","sources":["webpack://empathy-bytes-2023/./src/components/interviewcard.js","webpack://empathy-bytes-2023/./src/templates/collection.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { Link } from \"gatsby\";\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport \"../styles/components/interviewcard.css\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { CardActionArea } from '@mui/material';\r\n\r\n\r\n/**\r\n * This component is used on each collection page (../templates/collection.js) to \r\n * house individual interview titles, authors, photos, \r\n * and descriptions. Each component is a grid row.\r\n * \r\n * @param {*} props \r\n * @returns the card component\r\n */\r\n\r\n// TODO: change styling to use css \r\n\r\n// const col = {\r\n//     padding: 10,\r\n// };\r\n\r\n// const row = {\r\n//     [\"borderBottom\"]: '5px solid #b3a369',\r\n//     padding: 15,\r\n//     [\"font-family\"]: 'Roboto',\r\n// };\r\n\r\n// const summary = {\r\n//     ['line-clamp']: 3,\r\n//     ['text-overflow']: 'ellipsis',\r\n//     overflow: 'hidden',\r\n// }\r\n\r\nexport default function InterviewCard(props) {\r\n    const matches = useMediaQuery('(min-width:800px)');\r\n    if (matches) {\r\n        return (\r\n            <section className=\"int_card\">\r\n                <Link to={props.url} style={{textDecoration:\"none\", color:\"inherit\"}}>\r\n                    <CardActionArea>\r\n                        <Grid \r\n                            container spacing = {2}\r\n                            alignItems = \"center\"\r\n                            justifyContent=\"space-between\"\r\n                        >\r\n                            <Grid item xs={4}>\r\n                                <img className=\"img-style\" src={props.img}/>\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n                                <h2 className=\"ep_title\">{props.title}</h2>\r\n                                <p>By {props.author}</p>\r\n                                <div className = \"summary\" dangerouslySetInnerHTML={{ __html: props.body}}/>\r\n                                <p>{props.date}</p>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                </Link>\r\n            </section>\r\n        );\r\n    } else {\r\n        return (\r\n            <section className=\"int_card\">\r\n                <Link to={props.url} style={{textDecoration:\"none\", color:\"inherit\"}}>\r\n                    <CardActionArea>\r\n                        <Grid //component borrowed from MUI\r\n                            container spacing={2}\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={4}>\r\n                                    <img className=\"img-style\" src={props.img}/>\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n                                <h2 className=\"ep_title\">{props.title}</h2>\r\n                                <p>By {props.author}</p>\r\n                            </Grid>\r\n                            <Grid item xs={12}>                \r\n                                <div className=\"summary\" dangerouslySetInnerHTML={{ __html: props.body}}/>\r\n                                <p>{props.date}</p>               \r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                </Link>\r\n            </section>\r\n        );\r\n    }\r\n    \r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from \"../components/layout\";\r\nimport InterviewCard from '../components/interviewcard';\r\nimport \"../styles/fonts.css\"\r\n\r\n/**\r\n * Functional Collection Component\r\n * This function will find all the collection components on the drupal site and create a page\r\n * on the gatsby site for each component. This is the page accessed when\r\n * the card component in clicked.\r\n */\r\n\r\n// TODO: Move this styling to a separate file \r\n\r\nconst container = {\r\n    padding: \"5% 5%\",\r\n    // paddingTop: \"10%\",\r\n    [\"font-family\"]: 'Roboto',\r\n};\r\n\r\nconst collection_name = {\r\n    [\"text-align\"]: 'center',\r\n    ['padding-top']: 10,\r\n    ['font-family']: 'Roboto Slab, serif',\r\n    color: '#b3a369',\r\n}\r\n\r\nfunction Collection({ data }) {\r\n    const collection = data.collection;\r\n    const interview = data.interview.relationships.node__article;\r\n\r\n    return (\r\n        <Layout>\r\n            <title>{collection.title}</title>\r\n            <div style={container}>\r\n                <h1 style={collection_name}>{collection.title}</h1>\r\n                <div dangerouslySetInnerHTML={{ __html: collection.body.processed }} />\r\n                <p></p>\r\n                {interview.map((i) => (\r\n                    <InterviewCard\r\n                        img={\"https://empathybytes.library.gatech.edu\" + i.relationships.field_image.uri.url}\r\n                        title={i.title}\r\n                        author={i.field_author}\r\n                        date={i.field_hg_dateline}\r\n                        body={i.field_blurb}\r\n                        url={\"/projects\" + collection.path.alias + i.path.alias}\r\n                    />\r\n                ))}\r\n\r\n            </div>\r\n        </Layout>\r\n    );\r\n}\r\n\r\n\r\n\r\n// These are the graphql queries to pull the drupal site data\r\nCollection.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n};\r\n\r\n/**\r\n * This query first pulls all collection data by title. Then, the interviews \r\n * with the same collection id are pulled.\r\n */\r\nexport const query = graphql`\r\n    query ($CollectionTitle: String!) {\r\n        collection: nodeCollection(title: { eq: $CollectionTitle }) {\r\n            id\r\n            title\r\n            body {\r\n                processed\r\n            }\r\n            path {\r\n                alias\r\n            }\r\n            relationships {\r\n                field_image {\r\n                    uri {\r\n                        url\r\n                        value\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        interview: taxonomyTermTags(name: {eq: $CollectionTitle }) {\r\n              relationships {\r\n                node__article {\r\n                        path {\r\n                            alias\r\n                        }\r\n                        id\r\n                        title\r\n                        field_author\r\n                        field_hg_dateline\r\n                        field_blurb\r\n                        body {\r\n                            processed\r\n                        }\r\n                        \r\n                        relationships {\r\n                            field_image {\r\n                                uri {\r\n                                    url\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n        }\r\n    }\r\n`;\r\nexport default Collection;"],"names":["InterviewCard","props","useMediaQuery","React","className","Link","to","url","style","textDecoration","color","CardActionArea","Grid","container","spacing","alignItems","justifyContent","item","xs","src","img","title","author","dangerouslySetInnerHTML","__html","body","date","padding","collection_name","_ref","data","collection","interview","relationships","node__article","Layout","processed","map","i","field_image","uri","field_author","field_hg_dateline","field_blurb","path","alias"],"sourceRoot":""}